services:
  inventoryscannercore:
    image: ${DOCKER_REGISTRY-}inventoryscannercore
    container_name: "inventoryscanner-core"
    ports:
    - "5000:8080"
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./InventoryScanner.Core/logs:/app/logs
    networks:
      - default
    depends_on:
      - postgres
      - rabbitmq

  postgres:
    image: "postgres:latest"
    container_name: "inventoryscanner-postgres"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./postgres-init:/docker-entrypoint-initdb.d"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inventoryscanner
    ports:
    - "5432:5432"
    networks:
      - default

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"      # AMQP
      - "15672:15672"    # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - default
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - loki
      
  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
    - ./loki/local-config.yaml:/etc/loki/local-config.yaml
    - ./loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    volumes:
      - ./promtail/promtail.yaml:/etc/promtail/promtail.yaml
      - ./InventoryScanner.Core/logs:/app/logs:ro
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      - loki

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  default:
